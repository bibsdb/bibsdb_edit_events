<?php
/**
 * @file
 * Code for the Bibsdb Edit Events feature.
 */

include_once 'bibsdb_event.features.inc';

/**
 * Disable caching of Event-nodes, so that events with sales-periods
 * are made available for sale at the correct time.
 */
function bibsdb_event_init() {    
  // Get the current active node object if present.
	$node = menu_get_object();
	if (!empty($node) && !empty($node->type) && $node->type == 'ding_event') {
		drupal_page_is_cacheable(FALSE);
	}
}

/**
 * Implements hook_cron().
 *
 * Unpublish expired events. Necessary for filtering. 
 * We only want to display event categories containing active events.
 * On unpublishing create redirect to /arrangementer.
 */
function bibsdb_event_cron() {
  $now = format_date(time(), 'custom', 'Y-m-d H:i:s');

	$query = new EntityFieldQuery();

  // Find event-nodes where end-date is before now
	$query->entityCondition('entity_type', 'node')
	->entityCondition('bundle', 'ding_event')
	->propertyCondition('status', NODE_PUBLISHED)
	->fieldCondition('field_ding_event_date', 'value2', $now, '<');

	$result = $query->execute();

	if (!empty($result['node'])) {
		$nids = array_keys($result['node']);

	 // Loop nodes and unpublish
		foreach ($nids as $nid) {
			$node = node_load($nid, NULL, TRUE);
			$node->status = NODE_UNPUBLISHED;
			node_save($node);

	    // Create redirect
			$source = 'node/' . $nid;
			// Check if a redirect exists already. If not - create one.
			if (!(redirect_load_by_source($source))) {
				$redirect = new stdClass();

				redirect_object_prepare(
					$redirect,
					array(
						'source' => $source,
						'source_options' => array(),
						'redirect' => 'arrangementer',
						'redirect_options' => array(),
						'language' => LANGUAGE_NONE,
						)
					);
				redirect_save($redirect);
			}
		}
	}
}

/**
 * Implements hook_form_alter()
 * Count chars in lead. More than 255 chars will break Place2book integration
 */

function bibsdb_event_form_ding_event_node_form_alter(&$form, &$form_state, $form_id) {
  $form['#attached']['js'][] = drupal_get_path('module', 'bibsdb_event') . '/js/bibsdb_event.js';
}

/**
 * Implements hook_form_alter()
 * Hide empty category terms in event view filter.
 */

function bibsdb_event_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#id'] == 'views-exposed-form-ding-event-ding-event-list') {

    $vocabulary = 'event_category';    
    $vocab = taxonomy_vocabulary_machine_name_load($vocabulary);
    $terms = taxonomy_get_tree($vocab->vid);
    $allowed_terms = array();

    foreach ($terms as $term) {
      // Filter out empty terms
      $query = new EntityFieldQuery;
      $query->entityCondition('entity_type', 'node')
      ->fieldCondition('field_ding_event_category', 'tid', $term->tid)
      ->propertyCondition('status', NODE_PUBLISHED);
      $result = $query->execute();
      // Skip this term if there are no published nodes attached to it
      if (!(isset($result['node']))) {
        continue;
      }

      $allowed_terms[$term->tid] = $term->name;
    }

    // Set value to exposed filters.
    unset($form['field_ding_event_category_tid']['#options']);
    $form['field_ding_event_category_tid']['#options'] = $allowed_terms;
  }
}
